@page "/fault/{FaultId:int}"
@inherits HookComponentBase
@using DashTransit.Core.Application.Commands
@using Newtonsoft.Json
@inject IMediator Mediator

@code {
    [Parameter]
    public int FaultId { get; set; }

    public Task<Core.Domain.Fault?> FetchFault()
        => this.Mediator.Send(new FaultById(Core.Domain.FaultId.From(FaultId)));

    public Action Resend(SetState<bool> setResending, AuditId auditId, EndpointId endpointId) => async () =>
    {
        setResending(true);
        await this.Mediator.Send(new ResendMessage(auditId, endpointId));
        setResending(false);
    };
}

<FluentLoader Fetch=@FetchFault Dependencies=@(new object[] { FaultId })>
    @if (context is null)
    {
        <p>Message not found</p>
    }
    else
    {
        var (resending, setResending) = Hook.UseState(false);

        <HxButton Color="ThemeColor.Primary"
              Text="Resend"
              disabled=@resending
              @onclick=@Resend(setResending, AuditId.From(context.Message!.AuditRecordId), context.ProducedBy) />
        <TwoColumnLayout>
            <Left>
                <div>
                    <h3>@context.Exceptions.First().Message</h3>
                    <dl>
                        <DL T="Message Id">
                            <a Href=@($"/message/{context.Message!.AuditRecordId}")>@(context.MessageId)</a>
                        </DL>
                        <DL T="Faulted" D=@(context.Produced) />
                        <DL T="Endpoint" D=@(context.ProducedBy) />
                        <DL T="Exception Type" D=@(context.Exceptions.First().ExceptionType) />
                        <DL T="Source" D=@(context.Exceptions.First().Source) />
                    </dl>
                </div>
            </Left>
            <Right>
                <Code>@context.Exceptions.First().StackTrace</Code>
            </Right>
        </TwoColumnLayout>
    }
</FluentLoader>