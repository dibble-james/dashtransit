@page "/message/{AuditId:int}"
@inherits HookComponentBase
<DTPageTitle>Message</DTPageTitle>
@using Newtonsoft.Json
@inject IMediator Mediator

@code {
    [Parameter]
    public int AuditId { get; set; }

    private Task<IRawAuditData?> FetchMessage()
        => this.Mediator.Send(new MessageByAuditId(Core.Domain.AuditId.From(AuditId)));
}

<FluentLoader Fetch=@FetchMessage Dependencies=@(new object[] { AuditId })>
    @if (context is null)
    {
        <p>Message not found</p>
    }
    else
    {
        var (editing, setEditing) = Hook.UseState(false);

        <div class="d-flex">
            <HxButton CssClass="align-self-start"
                  Color="ThemeColor.Primary"
                  Text=@(editing ? "Cancel" : "Edit & Resend")
                  OnClick=@(() => setEditing(!editing)) />
        </div>

        @if (editing)
        {
            var headers = new List<MessageEditor.HeaderItem>(context.Headers.Select(x => new MessageEditor.HeaderItem
                        {
                            Header = x.Key,
                            Content = x.Value,
                        }))
            {
                new MessageEditor.HeaderItem { Header = MassTransit.MessageHeaders.MessageId, Content = context.MessageId?.ToString() },
                new MessageEditor.HeaderItem { Header = MassTransit.MessageHeaders.CorrelationId, Content = context.CorrelationId?.ToString() },
                new MessageEditor.HeaderItem { Header = MassTransit.MessageHeaders.ConversationId, Content = context.ConversationId?.ToString() },
            };

            <MessageEditor Message=@(new MessageEditor.MessageViewModel {
                MessageType = context.MessageType,
                Message = JsonConvert.SerializeObject(context.Message, Formatting.Indented),
                Headers = headers,
            }) />
        }
        else
        {
            <TwoColumnLayout>
                <Left>
                    <div>
                        <h3>Message Properties</h3>
                        <dl>
                            <DL T="Sender" D=@(context.SourceAddress) />
                            <DL T="Message Type" D=@(context.MessageType) />
                        </dl>
                    </div>
                </Left>
                <Right>
                    <AutoColumn>
                        <h3>Headers</h3>
                        <dl>
                            <DL T="Message Id" D=@(context.MessageId) />
                            <DL T="Correlation Id" D=@(context.CorrelationId) />
                            <DL T="Conversation Id" D=@(context.ConversationId) />
                            @foreach (var header in context.Headers)
                            {
                                <DL T=@header.Key D=@header.Value />
                            }
                        </dl>
                    </AutoColumn>
                </Right>
            </TwoColumnLayout>
            <Code>@JsonConvert.SerializeObject(context.Message, Formatting.Indented)</Code>
            <div class="accordions">
                <Actors MessageId="context.MessageId" />
                <Conversation ConversationId="context.ConversationId!.Value" />
            </div>
        }
    }
</FluentLoader>