@inherits HookComponentBase
@page "/message/send"
<DTPageTitle>Send</DTPageTitle>
@using System.Linq.Expressions
@using DashTransit.Core.Application.Commands
@using System.ComponentModel.DataAnnotations
@inject IMediator Mediator
@inject IHxMessengerService Messenger

@{
    var (headers, setHeaders) = Hook.UseState(new List<HeaderItem> { new HeaderItem() });

    Action AddHeader = () =>
    {
        headers!.Add(new HeaderItem());
        headersTable?.RefreshDataAsync();
    };

    Func<HeaderItem, Action> RemoveHeader = item => () =>
    {
        headers!.Remove(item);

        if (!headers.Any())
        {
            headers.Add(new HeaderItem());
        }

        headersTable?.RefreshDataAsync();
    };
}

<EditForm Model="state" OnValidSubmit="Sender(headers!)">
    <DataAnnotationsValidator />
    <HxInputText Label="Endpoint" @bind-Value="@state.Endpoint" />
    <HxInputText Label="Message Type" @bind-Value="@state.MessageType" />
    <p>Headers</p>
    <HxGrid TItem="HeaderItem"
            TableContainerCssClass="table-responsive"
            DataProvider="x => Task.FromResult(x.ApplyTo(headers))"
            ShowFooterWhenEmptyData=true
            PlaceholdersRowCount=0
            @ref="headersTable">
        <Columns>
            <HxGridColumn TItem="HeaderItem" HeaderText="Header">
                <ItemTemplate Context="item">
                        <HxInputText @bind-Value="item.Header" />
                </ItemTemplate>
                <FooterTemplate Context="x">
                    <HxButton Icon="BootstrapIcon.Plus" OnClick=AddHeader Color="ThemeColor.Secondary" />
                </FooterTemplate>
            </HxGridColumn>
            <HxGridColumn TItem="HeaderItem" HeaderText="Content">
                <ItemTemplate Context="item">
                        <HxInputText @bind-Value="item.Content" />
                </ItemTemplate>
            </HxGridColumn>
        </Columns>
        <ContextMenu Context="item">
            <HxContextMenu>
                <HxContextMenuItem Text="Remove" OnClick="RemoveHeader(item)" />
            </HxContextMenu>
        </ContextMenu>
    </HxGrid>
    <HxInputTextArea Label="Message" @bind-Value="@state.Message" />
    <HxSubmit Color="ThemeColor.Primary">Send</HxSubmit>
</EditForm>

@code {

    private SendState state = new SendState();
    private HxGrid<HeaderItem>? headersTable;

    private Func<Task> Sender(List<HeaderItem> headers) => async () =>
    {
        try
        {
            await this.Mediator.Send(
                new SendMessage(
                    EndpointId.From(new Uri(state.Endpoint)),
                    state.MessageType,
                    headers.Select(x => KeyValuePair.Create(x.Header, x.Content)),
                    state.Message));
            this.Messenger.AddInformation("Send", $"Message Sent");
        }
        catch (Exception ex)
        {
            this.Messenger.AddError("Send", $"Couldn't send message {ex}");
        }
    };

    public class SendState
    {
        [Required]
        public string Endpoint { get; set; } = null!;
        [Required]
        public string MessageType { get; set; } = null!;
        [Required]
        public string Message { get; set; } = null!;
    }

    private record HeaderItem
    {
        public string? Header { get; set; }
        public string? Content { get; set; }
    }
}